# Create yaml to pass commands and argument

apiVersion: v1
kind: Pod
metadata:
  name: command-demo
  labels:
    purpose: demonstrate-command
spec:
  containers:
    - name: command-demo-container
      image: debian
      command: ["/bin/sh"]
      args: ["-c", "while true; do echo hello; sleep 10;done"]
  restartPolicy: OnFailure

# Create yaml to pass environments

apiVersion: v1
kind: Pod
metadata:
  name: print-greeting
spec:
  containers:
    - name: env-print-demo
      image: bash
      env:
        - name: GREETING
          value: "Warm greetings to"
        - name: HONORIFIC
          value: "The Most Honorable"
        - name: NAME
          value: "Kubernetes"
      command: ["echo"]
      args: ["$(GREETING) $(HONORIFIC) $(NAME)"]

# file app-config.properties
APP_COLOR=darkblue

# Create imperative configmap

kubectl create configmap \
  <config-nam> --from-literal=<key>=<value>

kubectl create configmap \
  app-config --from-literal=APP_COLOR=blue \
             --from-literal=APP_MOD=prod

kubectl create configmap
  <config-name> --from-file=<path-to-file>

kubectl create configmap \
  app-config --from-file=app_config.properties

# Create yaml for configmap

apiVersion: v1
kind: ConfigMap
metadata:
  name: game-demo
data:
  # property-like keys; each key maps to a simple value
  player_initial_lives: 3
  ui_properties_file_name: "user-interface.properties"
  # file-like keys
  game.properties: |
    enemy.types=aliens,monsters
    player.maximum-lives=5
  user-interface.properties: |
    color.good=purple
    color.bad=yellow
    allow.textmode=true

# Create pod using configmap

apiVersion: v1
kind: Pod
metadata:
  name: configmap-demo-pod
spec:
  containers:
    - name: demo
      image: game.example/demo-game
      env:
        - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
          # from the key name in the ConfigMap.
          # Inject environment values as single value
          valueFrom:
            configMapKeyRef:
              name: game-demo           # The ConfigMap this value comes from.
              key: player_initial_lives # The key to fetch.
        - name: UI_PROPERTIES_FILE_NAME
          valueFrom:
            configMapKeyRef:
              name: game-demo
              key: ui_properties_file_name
      # Inject environment values as configmap
      envFrom:
        - configMapRef:
            name: game-demo
      volumeMounts:
        - name: config
          mountPath: "/config"
          readOnly: true
  volumes:
    - name: config
      configMap:
        # Provide the name of the ConfigMap you want to mount.
        name: game-demo

# file app-config.properties
DB_Host: mysql
DB_User: root
DB_Password: paswrd

# Create a Secrets
kubectl create secret generic
  <secret-name> --from-liteeral=<key>=<value>

kubectl create secret generic \
  app-secret --from-literal=DB_Host=sql01 \
             --from-literal=DB_User=root \
             --from-literal=DB_Password=password123

Secret 1: DB_Host=sql01
Secret 2: DB_User=root
Secret 3: DB_Password=password123

kubectl create secret generic
  <config-name> --from-file=<path-to-file>

kubectl create secret generic \
  app-config --from-file=app_config.properties

# Convert msg into base64
echo -n 'mysql' | base64

# Convert base64 into msg
echo -n 'bXlzcWw=' | base64 --decode

# Create Secret yaml

apiVersion: v1
kind: Secret
metadata:
  name: mysecret
data:
  username: myuser
  password: mypassword

apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm

apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
stringData:
  username: administrator

# Create pod using secret

apiVersion: v1
kind: Pod
metadata:
  name: secret-demo-pod
spec:
  containers:
    - name: demo
      image: game.example/demo-game
      env:
        - name: PLAYER_INITIAL_LIVES # Notice that the case is different here
          # from the key name in the secret.
          # Inject environment values as single value
          valueFrom:
            secretKeyRef:
              name: app-config           # The secret this value comes from.
              key: DB_Host # The key to fetch.
        - name: UI_PROPERTIES_FILE_NAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_User
      # Inject environment values as secret
      envFrom:
        - secretRef:
            name: app-config
      volumeMounts:
        - name: secret
          mountPath: "/config"
          readOnly: true
  volumes:
    - name: secret
      secret:
        # Provide the name of the ConfigMap you want to mount.
        name: app-config